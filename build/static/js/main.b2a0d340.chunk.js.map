{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","services/server.ts","components/Dropzone/index.tsx","pages/Points/PointsCreate/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","Component","server","axios","create","baseURL","Dropzone","onFileUploaded","useState","selectedFileUrl","setSelectedFileUrl","onDrop","useCallback","acceptedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","PointsCreate","selectedFile","setSelectedFile","initialMapPosition","setInitialPosition","selectedMapPosition","setSelectedPosition","states","setStates","selectedState","setSelectedState","cities","setCities","selectedCity","setSelectedCity","categories","setCategories","selectedCategories","setSelectedCategories","summary","email","phone","formData","setFormData","history","useHistory","handleInputChange","event","target","name","value","a","preventDefault","state","city","latitude","longitude","data","FormData","append","String","join","post","alert","push","useEffect","navigator","geolocation","getCurrentPosition","position","coords","get","then","response","map","initials","sigla","nome","undefined","action","onSubmit","htmlFor","type","onChange","Map","center","zoom","onClick","latlng","lat","lng","TileLayer","attribution","url","Marker","key","category","findIndex","filter","handleCategoryCheck","includes","image_url","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2a0d340.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47c4581a.svg\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FiLogIn } from 'react-icons/fi';\r\n\r\nimport './styles.css'\r\n\r\nimport logo from '../../assets/logo.svg';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"page-home\">\r\n        <div className=\"content\">\r\n          <header>\r\n            <img src={logo} alt=\"Logo do Ecoleta\"/>\r\n          </header>\r\n\r\n          <main>\r\n            <h1>Seu marketplace de coleta de res√≠duos.</h1>\r\n            <p>Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente.</p>\r\n\r\n            <Link to=\"/points/create\">\r\n              <span><FiLogIn /></span>\r\n              <strong>Cadastre um ponto de coleta</strong>\r\n            </Link>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import axios from 'axios';\n\nconst server = axios.create({\n  baseURL: 'http://localhost:3333/',\n});\n\nexport default server;\n","import React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { FiUpload } from 'react-icons/fi';\n\nimport './styles.css';\n\ninterface DropzoneProps {\n  onFileUploaded: (file: File) => void;\n}\n\nconst Dropzone: React.FC<DropzoneProps> = ({ onFileUploaded }) => {\n  const [selectedFileUrl, setSelectedFileUrl] = useState('');\n\n  const onDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n    const fileUrl = URL.createObjectURL(file);\n    \n    setSelectedFileUrl(fileUrl);\n    onFileUploaded(file);\n  }, [onFileUploaded]);\n\n  const {getRootProps, getInputProps} = useDropzone({\n    onDrop,\n    accept: 'image/*',\n  });\n\n  return (\n    <div className=\"dropzone\" {...getRootProps()}>\n      <input {...getInputProps()} accept=\"image/*\" />\n      \n      { selectedFileUrl\n        ? <img src={selectedFileUrl} alt=\"Miniatura da imagem do estabelecimento\"/>\n        : (\n          <p>\n            <FiUpload />\n            Imagem do estabelecimento\n          </p>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Dropzone;\n","import React, { ChangeEvent, FormEvent, useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport { Map, TileLayer, Marker } from 'react-leaflet'\nimport { LeafletMouseEvent } from 'leaflet'\n\nimport axios from 'axios';\nimport server from '../../../services/server';\n\nimport Dropzone from '../../../components/Dropzone';\n\nimport './styles.css';\n\nimport logo from '../../../assets/logo.svg';\n\ninterface State {\n  initials: string;\n  name: string;\n}\n\ninterface City {\n  id: number;\n  name: string;\n}\n\ninterface Category {\n  id: number,\n  name: string,\n  image_url: string\n}\n\ninterface IbgeResponseState {\n  sigla: string;\n  nome: string;\n}\n\ninterface IbgeResponseCity {\n  id: number;\n  nome: string;\n}\n\nfunction PointsCreate() {\n  const [selectedFile, setSelectedFile] = useState<File>();\n\n  const [initialMapPosition, setInitialPosition] = useState<[number, number]>([0, 0]);\n  const [selectedMapPosition, setSelectedPosition] = useState<[number, number]>([0, 0]);\n\n  const [states, setStates] = useState<State[]>([]);\n  const [selectedState, setSelectedState] = useState('');\n\n  const [cities, setCities] = useState<City[]>([]);\n  const [selectedCity, setSelectedCity] = useState('');\n\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<number[]>([]);\n\n  const [formData, setFormData] = useState({\n    summary: '',\n    email: '',\n    phone: ''\n  });\n\n  const history = useHistory();\n\n  /**\n   * Get and set map initial position from user location.\n   */\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      const { latitude, longitude } = position.coords;\n\n      setInitialPosition([latitude, longitude]);\n    });\n  }, []);\n\n  /**\n   * Fetch and set categories.\n   */\n  useEffect(() => {\n    server.get('categories').then(response => {\n      setCategories(response.data);\n    });\n  }, []);\n\n  /**\n   * Fetch and set states.\n   */\n  useEffect(() => {\n    axios.get<IbgeResponseState[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados?orderBy=nome').then(response => {\n      const states = response.data.map(state => {\n        return {\n          initials: state.sigla,\n          name: state.nome,\n        };\n      });\n\n      setStates(states);\n    });\n  }, []);\n\n  /**\n   * Fetch and set cities.\n   */\n  useEffect(() => {\n    if (selectedState === undefined) {\n      return;\n    }\n\n    axios\n      .get<IbgeResponseCity[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedState}/municipios?orderBy=nome`)\n      .then(response => {\n        const cities = response.data.map(city => {\n          return {\n            id: city.id,\n            name: city.nome,\n          };\n        });\n\n        setCities(cities);\n    });\n  }, [selectedState]);\n\n  function handleMapClick(event: LeafletMouseEvent) {\n    setSelectedPosition([\n      event.latlng.lat,\n      event.latlng.lng,\n    ]);\n  }\n\n  function handleStateSelectChange(event: ChangeEvent<HTMLSelectElement>) {\n    setSelectedState(event.target.value);\n  }\n\n  function handleCitySelectChange(event: ChangeEvent<HTMLSelectElement>) {\n    setSelectedCity(event.target.value);\n  }\n\n  function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\n    const { name, value } = event.target;\n\n    setFormData({\n      ...formData, [name]: value,\n    });\n  }\n\n  function handleCategoryCheck(id: number) {\n    const alreadySelected = selectedCategories.findIndex(category => category === id);\n\n    let categories = [];\n\n    if (alreadySelected >= 0) {\n      categories = selectedCategories.filter(category => category !== id);\n    } else {\n      categories = [\n        ...selectedCategories, id,\n      ];\n    }\n\n    setSelectedCategories(categories);\n  }\n\n  async function handleSubmit(event: FormEvent) {\n    event.preventDefault();\n\n    const { summary, email, phone } = formData;\n    const state = selectedState;\n    const city = selectedCity;\n    const [latitude, longitude] = selectedMapPosition;\n    const categories = selectedCategories;\n\n    const data = new FormData();\n\n    data.append('summary', summary);\n    data.append('email', email);\n    data.append('phone', phone);\n    data.append('latitude', String(latitude));\n    data.append('longitude', String(longitude));\n    data.append('state', state);\n    data.append('city', city);\n    data.append('categories', categories.join(','));\n\n    if (selectedFile) {\n      data.append('image', selectedFile);\n    }\n\n    await server.post('points', data);\n\n    alert('Ponto de coleta criado com sucesso!');\n\n    history.push('/');\n  }\n\n  return (\n    <div id=\"page-create-point\">\n      <header>\n        <img src={logo} alt=\"Logo do Ecoleta\"/>\n\n        <Link to=\"/\">\n          <span><FiArrowLeft /></span>\n          <span>Voltar para a home</span>\n        </Link>\n      </header>\n\n      <form action=\"\" onSubmit={handleSubmit}>\n        <h1>Cadastro do ponto de coleta</h1>\n\n        <Dropzone onFileUploaded={setSelectedFile} />\n\n        <fieldset>\n          <legend>\n            <h2>Dados</h2>\n          </legend>\n\n          <div className=\"field\">\n            <label htmlFor=\"summary\">Estabelecimento</label>\n            <input \n              type=\"text\"\n              name=\"summary\"\n              id=\"summary\"\n              onChange={handleInputChange}\n            />\n          </div>\n\n          <div className=\"field-group\">\n            <div className=\"field\">\n              <label htmlFor=\"name\">E-mail</label>\n              <input \n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                onChange={handleInputChange}\n              />\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"name\">Celular</label>\n              <input \n                type=\"text\"\n                name=\"phone\"\n                id=\"phone\"\n                onChange={handleInputChange}\n              />\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset>\n          <legend>\n            <h2>Endere√ßo</h2>\n            <span>Selecione o endere√ßo no mapa</span>\n          </legend>\n\n          <Map center={initialMapPosition} zoom={15} onClick={handleMapClick}>\n            <TileLayer\n              attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n\n            <Marker position={selectedMapPosition} />\n          </Map>\n\n          <div className=\"field-group\">\n            <div className=\"field\">\n              <label htmlFor=\"state\">Estado</label>\n              <select\n                name=\"state\"\n                id=\"state\"\n                value={selectedState}\n                onChange={handleStateSelectChange}\n              >\n                <option value=\"\">Selectione o estado</option>\n                {states.map(state => (\n                  <option key={state.initials} value={state.initials}>{state.name}</option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"field\">\n              <label htmlFor=\"city\">Cidade</label>\n              <select\n                name=\"city\"\n                id=\"city\"\n                onChange={handleCitySelectChange}\n              >\n                <option value=\"\">Selectione a cidade</option>\n                {cities.map(city => (\n                  <option key={city.id} value={city.id}>{city.name}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </fieldset>\n\n        <fieldset>\n          <legend>\n            <h2>Categorias de coleta</h2>\n            <span>Selecione um ou mais √≠tens abaixo</span>\n          </legend>\n\n          <ul className=\"items-grid\">\n            {categories.map(category => (\n              <li\n                key={category.id}\n                onClick={() => handleCategoryCheck(category.id)}\n                className={selectedCategories.includes(category.id) ? 'selected' : ''}\n              >\n                <img src={category.image_url} alt={category.name} />\n                <span>{category.name}</span>\n              </li>\n            ))}\n          </ul>\n        </fieldset>\n\n        <button type=\"submit\">\n          Cadastrar\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default PointsCreate;\n","import React, { Component } from 'react';\nimport { Route, BrowserRouter } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport PointsCreate from './pages/Points/PointsCreate';\n\nclass Routes extends Component {\n  render () {\n    return (\n      <BrowserRouter>\n        <Route component={Home} path=\"/\" exact />\n        <Route component={PointsCreate} path=\"/points/create\" />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default Routes;\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Routes from './routes'\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n      <Routes />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}